/**************** block css ******************/

@import "../styles/core";

$block_border_width: 4px;
$block_border_radius: 2px;

$block_icon_width: 42px;
$block_icon_height: 36px;

//**************** custom mixins ******************

@mixin block_style($name) {
  &.block_#{$name} {
    .block_background {
      fill: color_variable("block_" + $name);
      stroke-miterlimit: 10;
      stroke-width: 5;
      stroke-linejoin: round;
    }

    .block_border {
      stroke: color_variable("block_" + $name + "_border");
    }
  }
}

//pass 2 variables
//example: top, left

//no longer needed, can remove in the future

@mixin corner($corners...) {
  //.top_left
  .#{nth($corners, 1)}_#{nth($corners, 2)} {
    position: absolute;
    z-index: 100;

    width: 10px;
    height: 10px;

    @include border-radius($border_radius);

    @each $name in $corners {
      #{$name}: 0px; //top: 0px

      border: {
        #{$name}: $block_border_width
          solid
          color_variable("block_border"); //top
      }
    }
  }
}

//**************** css ******************

:host {
  display: block;
}

.block_container {
  //  cursor: pointer;
  position: relative;

  @include box-sizing(border-box);

  @include block_style("start");
  @include block_style("middle");
  @include block_style("end");

  z-index: get_index(modal);

  /*
  @include corner(top, left);
  @include corner(top, right);
  @include corner(bottom, left);
  @include corner(bottom, right);
*/

  text {
    pointer-events: none;
    transition: all 0.2s ease-in-out;
  }

  &:not(.dashes):hover {
    .block_background {
      // fill: color_variable("block_hover");
      @include transition(none);
    }

    .block_border {
      stroke: color_variable("block_hover_border");
      @include transition(none);
    }
  }

  &.dashes {
    .block_background {
      fill: color_variable("background");
    }

    .block_border {
      stroke: color_variable("block_border_dashes");
    }

    &:hover {
      .block_border {
        stroke: color_variable("block_hover_dashes");
        @include transition(none);
      }
    }
  }

  &.size_small {
  }

  .icon_label {
    color: color_variable("background");

    font: {
      weight: bold;
    }
  }

  #tab_right {
    position: absolute;
    right: 0px;
    top: 0px;
    z-index: 100;

    @include translate(20px, 20px);
  }

  .block_background {
    @include transition(
      #{fill 0.2s easing($ease-in),
      stroke 0.2s easing($ease-in)}
    );
  }

  .block_border {
    @include transition(
      #{fill 0.2s easing($ease-in),
      stroke 0.2s easing($ease-in)}
    );
  }

  .tab_offset {
    @include translate(0px, 20px);
  }

  .overlay {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }

  .image {
    pointer-events: none;
    display: inline-flex;
    justify-content: center;
    align-items: center;

    position: absolute;
    left: 50%;
    top: 50%;
    z-index: 10;

    @include translate(-50%, -50%);

    svg {
      fill: white;
      width: 100%;
      height: 100%;

      ::ng-deep text {
        isolation: isolate;

        font: {
          // TODO determine best way to handle font size (had been size: $font_size_min, but best size depends on svg dimensions; now setting directly in svgs)
          family: $font_family;
          weight: bold;
        }
      }

      ::ng-deep .connection_in {
        stroke: color_variable("block_stroke");
        fill: color_variable("block_connection_in");
        stroke-miterlimit: 10;
      }

      ::ng-deep .connection_out {
        stroke: color_variable("block_stroke");
        fill: color_variable("block_connection_out");
        stroke-miterlimit: 10;
      }
    }
  }

  .block_label {
    font: {
      size: 90%;
    }
  }
}
