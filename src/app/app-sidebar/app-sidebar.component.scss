/**************** block css ******************/

@use "sass:math";
@import '../styles/core';

$toggle_button_count: 2;

//**************** custom mixins ******************

@mixin button_color($name) {
  &.button_#{$name} {
    .label {
      color: color_variable(#{'block_' + $name});
    }
  }
}


//**************** css ******************

:host {
  display: flex;
  flex-direction: column;

  width: 500px;

  border: {
    right: 2px solid color_variable('interface_border');
  }

  .tabs {
    display: flex;

    border: {
      bottom: 1px solid color_variable('interface_border');
    }

    .tab {
      cursor: pointer;
      flex-grow: 1;

      display: flex;
      justify-content: center;
      align-items: center;

      color: color_variable('interface_button');

      padding: ($padding) $padding;

      border: {
        bottom: 5px solid transparent;
      }

      @include box-sizing(border-box);

      &:hover {
        border: {
          bottom: {
            color: #aaa; //color_variable('interface_tab_selected');
          }
        }
      }

      &.selected {
        color: color_variable('interface_tab_selected');

        font: {
          weight: bold;
        }

        border: {
          bottom: {
            color: color_variable('interface_tab_selected');
          }
        }
      }
    }
  }

  .filters {
    padding: $padding;

    border: {
      bottom: 1px solid color_variable('interface_border');
    }
  }

  .search {
    display: flex;
    align-items: center;
    gap: $padding * .2;

    background: {
      color: color_variable('interface_search_background');
    }

    padding: ($padding * .2);

    font: {
      size: .8rem;
    }

    border: 1px solid color_variable('interface_border');

    @include border-radius($border_radius);

    .search_icon {
      display: flex;
      justify-content: center;
      align-items: center;

      svg {
        @include scale(.65);
      }
    }

    .molecules_like {
      cursor: pointer;

      display: flex;
      align-items: center;
      gap: $padding * .2;

      font: {
        size: .65rem;
      }

      &:hover {
        .search_icon,
        .remove_btn {
          color: color_variable('button_hover');
        }

        .molecule {
          background: {
            color: color_variable('button_hover');
          }
        }
      }

      .molecule {
        display: flex;
        align-items: center;
        gap: $padding * .2;

        background: {
          color: color_variable('interface_background');
        }

        padding: ($padding * .2) ($padding * .25);

        font: {
          weight: bold;
        }

        @include border-radius($border_radius);

        svg {
          @include scale(.8);
        }
      }

      .remove_btn {
        display: flex;
        justify-content: center;
        align-items: center;

        svg {
          @include scale(.65);
        }
      }
    }

    .search_field {
      flex-grow: 1;

      background: none;

      padding: ($padding * .2) ($padding * .25);

      font: {
        size: .8rem;
      }

      border: 0px;
    }
  }

  .block_list {
    flex-grow: 1;

    position: relative;
    display: flex;
    flex-direction: column;

    margin: {
//      top: $padding;
    }

//    @include shadow(10px, rgba(#000, .3), 2px, 2px);
    @include border-radius($interface_radius);

    background: {
      color: color_variable('background'); //just in case anything goes behind this
    }

    .content {
      flex-grow: 1;
      flex-basis: 0;

      display: flex;
      flex-wrap: wrap;
      align-content: flex-start;

      overflow: {
        y: scroll;
      }

      padding: ($padding) 0px;

      .item {
        //blocks have -negative index elements that compete with the normal structure. move above the -10 index
        position: relative;
        z-index: 20;

        width: calc(50% - #{$padding * 4});

        flex-shrink: 0;

        margin: ($padding * .5) ($padding);
        margin: {
          right: $padding * 2;
        }

        border: 1px solid color_variable('interface_border');

        @include border-radius($border_radius * 2);

        &.draggable {
          ::ng-deep .block_container {
            cursor: grab;
          }
        }

/*
        &.dragging {
          ::ng-deep .block_container {
            cursor: grabbing;
          }
        }
*/
      }
    }

    .preview {
      position: relative;

      background: {
        color: color_variable('interface_background_faded');
      }

      padding: ($padding * .5);

      .star_btn {
        position: absolute;
        right: $padding * .5;
        top: $padding * .5;
        z-index: 100;
      }
    }

    .info {
      padding: ($padding * .5);
      padding: {
        bottom: $padding * .75;
      }

      .formula {
        font: {
          weight: bold;
        }
      }

      .weight {
        color: #aaa; // color_variable('');

        font: {
          size: .85rem;
        }
      }
    }

    .block_wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
    }
/*

    .info {
      display: flex;
      align-items: center;
      justify-content: space-between;

      padding: $padding;

      font: {
        family: $font_family_header;
        size: 120%;
      }

      .count {
      }

      .filter {
        display: inline-flex;
        align-items: center;

        .filter_setting {
          cursor: pointer;

          margin: {
            left: $padding * .5;
          }
          padding: 2px ($padding * .25);

          font: {
            size: 90%;
          }
          text: {
            transform: uppercase;
          }

          border: 1px solid color_variable('interface_border');

          @include border-radius($border_radius);
        }
      }
    }

    .content {
      flex-grow: 1;
      flex-basis: 0;

      display: flex;
      flex-wrap: wrap;
      align-content: flex-start;

      overflow: {
        y: scroll;
      }

      padding: ($padding) 0px;

      .block-wrapper {
        //blocks have -negative index elements that compete with the normal structure. move above the -10 index
        position: relative;
        z-index: 20;

        flex-shrink: 0;

        margin: ($padding * .5) ($padding);
        margin: {
          right: $padding * 2;
        }

        &.draggable {
          ::ng-deep .block_container {
            cursor: grab;
          }
        }
*/
/*
        &.dragging {
          ::ng-deep .block_container {
            cursor: grabbing;
          }
        }
*/
/*
      }
    }
*/
/*
    .tabs {
      display: flex;
      align-items: stretch;

      background: {
        color: color_variable('interface_background_faded');
      }

      @include border-bottom-radius($interface_radius);

      .button {
        cursor: pointer;

        flex-grow: 1;

        padding: $padding;

        text: {
          align: center;
        }

        @include transition(#{background-color .2s easing($ease-in)});

        &:first-child {
          @include border-bottom-left-radius($interface_radius);
        }

        &:last-child {
          @include border-bottom-right-radius($interface_radius);
        }

        &.selected {
          background: {
            color: color_variable('background');
          }

          @include transition(none);
        }

        &:not(.selected) {
          &:hover {
            background: {
              color: color_variable('interface_hover');
            }

            @include transition(none);
          }
        }

        @include button_color('start');
        @include button_color('middle');
        @include button_color('end');

        block {
          //blocks have -negative index elements that compete with the normal structure. move above the -10 index
          position: relative;
          z-index: 20;

          display: inline-block;
        }

        .label {
          font: {
            size: 80%;
            weight: bold;
          }
          text: {
            transform: uppercase;
          }
        }
      }
    }
*/
  }
}

::ng-deep .cdk-overlay-container {
  .cdk-overlay-pane {
    position: absolute !important; //position static doesn't work here (not sure if this breaks other cdk-overlay panels)
    left: 0px;
    top: 0px;
    z-index: get_index(dragging);
  }

  .dragging_helper {
//todo: unable to get this to work...the grabbing icon changes, however, then the block won't drop into the workspace with pointer-events enabled
//    cursor: grabbing !important;
//    pointer-events: auto !important;

    display: inline-block; //don't let it get full width

    @include opacity(60);

    ::ng-deep block {
        .block_container {
        }
    }
  }
}
