/**************** block css ******************/

@use "sass:math";
@import '../styles/core';

$toggle_button_count: 2;

//**************** custom mixins ******************

@mixin button_color($name) {
  &.button_#{$name} {
    .label {
      color: color_variable(#{'block_' + $name});
    }
  }
}


//**************** css ******************

:host {
  display: flex;
  flex-direction: column;

  width: 460px;

  padding: $padding;

  .toggle {
    display: flex;
    position: relative;

    width: 80%;

    margin: {
      right: auto;
      left: auto;
    }

    font: {
      family: $font_family_header;
      size: 120%;
    }

    &:before {
      content: '';
      position: absolute;
      left: 0px;
      right: 0px;
      top: 0px;
      bottom: 0px;
      z-index: -50; //under everything

      margin: -3px; //create a bit of padding

      background: {
        color: color_variable('button_toggle_background');
      }

      @include border-radius($interface_radius);
    }

    &:after {
      content: '';
      position: absolute;
      left: 0%;
      top: 0px;
      bottom: 0px;
      z-index: -10; //under buttons

      width: math.div(100%, $toggle-button-count);

      background: {
        color: color_variable('button_toggle_selected');
      }

      @include border-radius($interface_radius);
      @include transition(#{left .3s easing($ease-in-out-cubic)});
    }

    @for $i from 0 through ($toggle_button_count - 1) {
      &.select_#{$i} {
        &:after {
          left: math.div(100%, $toggle-button-count) * $i;
        }
      }
    }

    .button {
      cursor: pointer;

      width: 50%;

      padding: ($padding * .5) ($padding);

      text: {
        align: center;
      }

      @include border-radius($interface_radius);
      @include transition(#{color .2s easing($ease-in)});

      &.selected {
      }

      &:not(.selected):hover {
        color: color_variable('button_toggle_hover');
        @include transition(none);
      }
    }
  }

  .block_list {
    flex-grow: 1;

    position: relative;
    display: flex;
    flex-direction: column;

    margin: {
      top: $padding;
    }

    @include shadow(10px, rgba(#000, .3), 2px, 2px);
    @include border-radius($interface_radius);

    background: {
      color: color_variable('background'); //just in case anything goes behind this
    }

    .info {
      display: flex;
      align-items: center;
      justify-content: space-between;

      padding: $padding;

      font: {
        family: $font_family_header;
        size: 120%;
      }

      .count {
      }

      .filter {
        display: inline-flex;
        align-items: center;

        .filter_setting {
          cursor: pointer;

          margin: {
            left: $padding * .5;
          }
          padding: 2px ($padding * .25);

          font: {
            size: 90%;
          }
          text: {
            transform: uppercase;
          }

          border: 1px solid color_variable('interface_border');

          @include border-radius($border_radius);
        }
      }
    }

    .content {
      flex-grow: 1;
      flex-basis: 0;

      display: flex;
      flex-wrap: wrap;
      align-content: flex-start;

      overflow: {
        y: scroll;
      }

      padding: ($padding) 0px;

      .block-wrapper {
        //blocks have -negative index elements that compete with the normal structure. move above the -10 index
        position: relative;
        z-index: 20;

        flex-shrink: 0;

        margin: ($padding * .5) ($padding);
        margin: {
          right: $padding * 2;
        }

        &.draggable {
          ::ng-deep .block_container {
            cursor: grab;
          }
        }

/*
        &.dragging {
          ::ng-deep .block_container {
            cursor: grabbing;
          }
        }
*/
      }
    }

    .tabs {
      display: flex;
      align-items: stretch;

      background: {
        color: color_variable('interface_background_faded');
      }

      @include border-bottom-radius($interface_radius);

      .button {
        cursor: pointer;

        flex-grow: 1;

        padding: $padding;

        text: {
          align: center;
        }

        @include transition(#{background-color .2s easing($ease-in)});

        &:first-child {
          @include border-bottom-left-radius($interface_radius);
        }

        &:last-child {
          @include border-bottom-right-radius($interface_radius);
        }

        &.selected {
          background: {
            color: color_variable('background');
          }

          @include transition(none);
        }

        &:not(.selected) {
          &:hover {
            background: {
              color: color_variable('interface_hover');
            }

            @include transition(none);
          }
        }

        @include button_color('start');
        @include button_color('middle');
        @include button_color('end');

        block {
          //blocks have -negative index elements that compete with the normal structure. move above the -10 index
          position: relative;
          z-index: 20;

          display: inline-block;
        }

        .label {
          font: {
            size: 80%;
            weight: bold;
          }
          text: {
            transform: uppercase;
          }
        }
      }
    }
  }
}

::ng-deep .cdk-overlay-container {
  .cdk-overlay-pane {
    position: absolute !important; //position static doesn't work here (not sure if this breaks other cdk-overlay panels)
    left: 0px;
    top: 0px;
    z-index: get_index(dragging);
  }

  .dragging_helper {
//todo: unable to get this to work...the grabbing icon changes, however, then the block won't drop into the workspace with pointer-events enabled
//    cursor: grabbing !important;
//    pointer-events: auto !important;

    display: inline-block; //don't let it get full width

    @include opacity(60);

    ::ng-deep block {
        .block_container {
        }
    }
  }
}
